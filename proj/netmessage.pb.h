// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessage.proto

#ifndef PROTOBUF_netmessage_2eproto__INCLUDED
#define PROTOBUF_netmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_netmessage_2eproto();
void protobuf_AssignDesc_netmessage_2eproto();
void protobuf_ShutdownFile_netmessage_2eproto();

class PageRequest;
class PageResult;
class UintFloatPair;
class Date;
class AccountRequest;
class AccountResult;
class FoodRequest;
class FoodResult;
class NutritionRequest;
class NutritionResult;
class HealthRequest;
class HealthResult;
class DataRequest;
class DataResult;

// ===================================================================

class PageRequest : public ::google::protobuf::Message {
 public:
  PageRequest();
  virtual ~PageRequest();

  PageRequest(const PageRequest& from);

  inline PageRequest& operator=(const PageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageRequest& default_instance();

  void Swap(PageRequest* other);

  // implements Message ----------------------------------------------

  PageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PageRequest& from);
  void MergeFrom(const PageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional .net.AccountRequest account_request = 3;
  inline bool has_account_request() const;
  inline void clear_account_request();
  static const int kAccountRequestFieldNumber = 3;
  inline const ::net::AccountRequest& account_request() const;
  inline ::net::AccountRequest* mutable_account_request();
  inline ::net::AccountRequest* release_account_request();
  inline void set_allocated_account_request(::net::AccountRequest* account_request);

  // optional .net.FoodRequest food_request = 4;
  inline bool has_food_request() const;
  inline void clear_food_request();
  static const int kFoodRequestFieldNumber = 4;
  inline const ::net::FoodRequest& food_request() const;
  inline ::net::FoodRequest* mutable_food_request();
  inline ::net::FoodRequest* release_food_request();
  inline void set_allocated_food_request(::net::FoodRequest* food_request);

  // optional .net.NutritionRequest nutrition_request = 5;
  inline bool has_nutrition_request() const;
  inline void clear_nutrition_request();
  static const int kNutritionRequestFieldNumber = 5;
  inline const ::net::NutritionRequest& nutrition_request() const;
  inline ::net::NutritionRequest* mutable_nutrition_request();
  inline ::net::NutritionRequest* release_nutrition_request();
  inline void set_allocated_nutrition_request(::net::NutritionRequest* nutrition_request);

  // optional .net.HealthRequest health_request = 6;
  inline bool has_health_request() const;
  inline void clear_health_request();
  static const int kHealthRequestFieldNumber = 6;
  inline const ::net::HealthRequest& health_request() const;
  inline ::net::HealthRequest* mutable_health_request();
  inline ::net::HealthRequest* release_health_request();
  inline void set_allocated_health_request(::net::HealthRequest* health_request);

  // optional .net.DataRequest data_request = 7;
  inline bool has_data_request() const;
  inline void clear_data_request();
  static const int kDataRequestFieldNumber = 7;
  inline const ::net::DataRequest& data_request() const;
  inline ::net::DataRequest* mutable_data_request();
  inline ::net::DataRequest* release_data_request();
  inline void set_allocated_data_request(::net::DataRequest* data_request);

  // @@protoc_insertion_point(class_scope:net.PageRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_account_request();
  inline void clear_has_account_request();
  inline void set_has_food_request();
  inline void clear_has_food_request();
  inline void set_has_nutrition_request();
  inline void clear_has_nutrition_request();
  inline void set_has_health_request();
  inline void clear_has_health_request();
  inline void set_has_data_request();
  inline void clear_has_data_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 user_id_;
  ::net::AccountRequest* account_request_;
  ::net::FoodRequest* food_request_;
  ::net::NutritionRequest* nutrition_request_;
  ::net::HealthRequest* health_request_;
  ::net::DataRequest* data_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static PageRequest* default_instance_;
};
// -------------------------------------------------------------------

class PageResult : public ::google::protobuf::Message {
 public:
  PageResult();
  virtual ~PageResult();

  PageResult(const PageResult& from);

  inline PageResult& operator=(const PageResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageResult& default_instance();

  void Swap(PageResult* other);

  // implements Message ----------------------------------------------

  PageResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PageResult& from);
  void MergeFrom(const PageResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .net.AccountResult account_result = 1;
  inline bool has_account_result() const;
  inline void clear_account_result();
  static const int kAccountResultFieldNumber = 1;
  inline const ::net::AccountResult& account_result() const;
  inline ::net::AccountResult* mutable_account_result();
  inline ::net::AccountResult* release_account_result();
  inline void set_allocated_account_result(::net::AccountResult* account_result);

  // optional .net.FoodResult food_result = 2;
  inline bool has_food_result() const;
  inline void clear_food_result();
  static const int kFoodResultFieldNumber = 2;
  inline const ::net::FoodResult& food_result() const;
  inline ::net::FoodResult* mutable_food_result();
  inline ::net::FoodResult* release_food_result();
  inline void set_allocated_food_result(::net::FoodResult* food_result);

  // optional .net.NutritionResult nutrition_result = 3;
  inline bool has_nutrition_result() const;
  inline void clear_nutrition_result();
  static const int kNutritionResultFieldNumber = 3;
  inline const ::net::NutritionResult& nutrition_result() const;
  inline ::net::NutritionResult* mutable_nutrition_result();
  inline ::net::NutritionResult* release_nutrition_result();
  inline void set_allocated_nutrition_result(::net::NutritionResult* nutrition_result);

  // optional .net.HealthResult health_result = 4;
  inline bool has_health_result() const;
  inline void clear_health_result();
  static const int kHealthResultFieldNumber = 4;
  inline const ::net::HealthResult& health_result() const;
  inline ::net::HealthResult* mutable_health_result();
  inline ::net::HealthResult* release_health_result();
  inline void set_allocated_health_result(::net::HealthResult* health_result);

  // optional .net.DataResult data_result = 5;
  inline bool has_data_result() const;
  inline void clear_data_result();
  static const int kDataResultFieldNumber = 5;
  inline const ::net::DataResult& data_result() const;
  inline ::net::DataResult* mutable_data_result();
  inline ::net::DataResult* release_data_result();
  inline void set_allocated_data_result(::net::DataResult* data_result);

  // @@protoc_insertion_point(class_scope:net.PageResult)
 private:
  inline void set_has_account_result();
  inline void clear_has_account_result();
  inline void set_has_food_result();
  inline void clear_has_food_result();
  inline void set_has_nutrition_result();
  inline void clear_has_nutrition_result();
  inline void set_has_health_result();
  inline void clear_has_health_result();
  inline void set_has_data_result();
  inline void clear_has_data_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::net::AccountResult* account_result_;
  ::net::FoodResult* food_result_;
  ::net::NutritionResult* nutrition_result_;
  ::net::HealthResult* health_result_;
  ::net::DataResult* data_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static PageResult* default_instance_;
};
// -------------------------------------------------------------------

class UintFloatPair : public ::google::protobuf::Message {
 public:
  UintFloatPair();
  virtual ~UintFloatPair();

  UintFloatPair(const UintFloatPair& from);

  inline UintFloatPair& operator=(const UintFloatPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UintFloatPair& default_instance();

  void Swap(UintFloatPair* other);

  // implements Message ----------------------------------------------

  UintFloatPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UintFloatPair& from);
  void MergeFrom(const UintFloatPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 int_value = 1;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 1;
  inline ::google::protobuf::uint32 int_value() const;
  inline void set_int_value(::google::protobuf::uint32 value);

  // required float float_value = 2;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  inline float float_value() const;
  inline void set_float_value(float value);

  // @@protoc_insertion_point(class_scope:net.UintFloatPair)
 private:
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 int_value_;
  float float_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static UintFloatPair* default_instance_;
};
// -------------------------------------------------------------------

class Date : public ::google::protobuf::Message {
 public:
  Date();
  virtual ~Date();

  Date(const Date& from);

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Date& default_instance();

  void Swap(Date* other);

  // implements Message ----------------------------------------------

  Date* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // required uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.Date)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static Date* default_instance_;
};
// -------------------------------------------------------------------

class AccountRequest : public ::google::protobuf::Message {
 public:
  AccountRequest();
  virtual ~AccountRequest();

  AccountRequest(const AccountRequest& from);

  inline AccountRequest& operator=(const AccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountRequest& default_instance();

  void Swap(AccountRequest* other);

  // implements Message ----------------------------------------------

  AccountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountRequest& from);
  void MergeFrom(const AccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required bytes password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .net.Date birthday = 4;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 4;
  inline const ::net::Date& birthday() const;
  inline ::net::Date* mutable_birthday();
  inline ::net::Date* release_birthday();
  inline void set_allocated_birthday(::net::Date* birthday);

  // optional uint32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 labor_type = 6;
  inline bool has_labor_type() const;
  inline void clear_labor_type();
  static const int kLaborTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 labor_type() const;
  inline void set_labor_type(::google::protobuf::uint32 value);

  // optional float height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline float height() const;
  inline void set_height(float value);

  // optional float weight = 8;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 8;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:net.AccountRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_labor_type();
  inline void clear_has_labor_type();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 gender_;
  ::net::Date* birthday_;
  ::google::protobuf::uint32 labor_type_;
  float height_;
  float weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static AccountRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountResult : public ::google::protobuf::Message {
 public:
  AccountResult();
  virtual ~AccountResult();

  AccountResult(const AccountResult& from);

  inline AccountResult& operator=(const AccountResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountResult& default_instance();

  void Swap(AccountResult* other);

  // implements Message ----------------------------------------------

  AccountResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountResult& from);
  void MergeFrom(const AccountResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const void* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:net.AccountResult)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_message_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static AccountResult* default_instance_;
};
// -------------------------------------------------------------------

class FoodRequest : public ::google::protobuf::Message {
 public:
  FoodRequest();
  virtual ~FoodRequest();

  FoodRequest(const FoodRequest& from);

  inline FoodRequest& operator=(const FoodRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodRequest& default_instance();

  void Swap(FoodRequest* other);

  // implements Message ----------------------------------------------

  FoodRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodRequest& from);
  void MergeFrom(const FoodRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eater_num = 1;
  inline bool has_eater_num() const;
  inline void clear_eater_num();
  static const int kEaterNumFieldNumber = 1;
  inline ::google::protobuf::uint32 eater_num() const;
  inline void set_eater_num(::google::protobuf::uint32 value);

  // optional uint32 cuisine_type = 2;
  inline bool has_cuisine_type() const;
  inline void clear_cuisine_type();
  static const int kCuisineTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 cuisine_type() const;
  inline void set_cuisine_type(::google::protobuf::uint32 value);

  // optional uint32 meal_type = 3;
  inline bool has_meal_type() const;
  inline void clear_meal_type();
  static const int kMealTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 meal_type() const;
  inline void set_meal_type(::google::protobuf::uint32 value);

  // repeated .net.UintFloatPair exist_food = 4;
  inline int exist_food_size() const;
  inline void clear_exist_food();
  static const int kExistFoodFieldNumber = 4;
  inline const ::net::UintFloatPair& exist_food(int index) const;
  inline ::net::UintFloatPair* mutable_exist_food(int index);
  inline ::net::UintFloatPair* add_exist_food();
  inline const ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >&
      exist_food() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >*
      mutable_exist_food();

  // repeated uint32 prefer_food = 5 [packed = true];
  inline int prefer_food_size() const;
  inline void clear_prefer_food();
  static const int kPreferFoodFieldNumber = 5;
  inline ::google::protobuf::uint32 prefer_food(int index) const;
  inline void set_prefer_food(int index, ::google::protobuf::uint32 value);
  inline void add_prefer_food(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      prefer_food() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_prefer_food();

  // repeated uint32 hate_food = 6 [packed = true];
  inline int hate_food_size() const;
  inline void clear_hate_food();
  static const int kHateFoodFieldNumber = 6;
  inline ::google::protobuf::uint32 hate_food(int index) const;
  inline void set_hate_food(int index, ::google::protobuf::uint32 value);
  inline void add_hate_food(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hate_food() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hate_food();

  // repeated uint32 selected_dish = 7 [packed = true];
  inline int selected_dish_size() const;
  inline void clear_selected_dish();
  static const int kSelectedDishFieldNumber = 7;
  inline ::google::protobuf::uint32 selected_dish(int index) const;
  inline void set_selected_dish(int index, ::google::protobuf::uint32 value);
  inline void add_selected_dish(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      selected_dish() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_selected_dish();

  // @@protoc_insertion_point(class_scope:net.FoodRequest)
 private:
  inline void set_has_eater_num();
  inline void clear_has_eater_num();
  inline void set_has_cuisine_type();
  inline void clear_has_cuisine_type();
  inline void set_has_meal_type();
  inline void clear_has_meal_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eater_num_;
  ::google::protobuf::uint32 cuisine_type_;
  ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair > exist_food_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > prefer_food_;
  mutable int _prefer_food_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hate_food_;
  mutable int _hate_food_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > selected_dish_;
  mutable int _selected_dish_cached_byte_size_;
  ::google::protobuf::uint32 meal_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static FoodRequest* default_instance_;
};
// -------------------------------------------------------------------

class FoodResult : public ::google::protobuf::Message {
 public:
  FoodResult();
  virtual ~FoodResult();

  FoodResult(const FoodResult& from);

  inline FoodResult& operator=(const FoodResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodResult& default_instance();

  void Swap(FoodResult* other);

  // implements Message ----------------------------------------------

  FoodResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodResult& from);
  void MergeFrom(const FoodResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.UintFloatPair recipe = 1;
  inline int recipe_size() const;
  inline void clear_recipe();
  static const int kRecipeFieldNumber = 1;
  inline const ::net::UintFloatPair& recipe(int index) const;
  inline ::net::UintFloatPair* mutable_recipe(int index);
  inline ::net::UintFloatPair* add_recipe();
  inline const ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >&
      recipe() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >*
      mutable_recipe();

  // @@protoc_insertion_point(class_scope:net.FoodResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair > recipe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static FoodResult* default_instance_;
};
// -------------------------------------------------------------------

class NutritionRequest : public ::google::protobuf::Message {
 public:
  NutritionRequest();
  virtual ~NutritionRequest();

  NutritionRequest(const NutritionRequest& from);

  inline NutritionRequest& operator=(const NutritionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NutritionRequest& default_instance();

  void Swap(NutritionRequest* other);

  // implements Message ----------------------------------------------

  NutritionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NutritionRequest& from);
  void MergeFrom(const NutritionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // repeated uint32 dish = 2 [packed = true];
  inline int dish_size() const;
  inline void clear_dish();
  static const int kDishFieldNumber = 2;
  inline ::google::protobuf::uint32 dish(int index) const;
  inline void set_dish(int index, ::google::protobuf::uint32 value);
  inline void add_dish(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dish() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dish();

  // @@protoc_insertion_point(class_scope:net.NutritionRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dish_;
  mutable int _dish_cached_byte_size_;
  ::google::protobuf::uint32 request_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static NutritionRequest* default_instance_;
};
// -------------------------------------------------------------------

class NutritionResult : public ::google::protobuf::Message {
 public:
  NutritionResult();
  virtual ~NutritionResult();

  NutritionResult(const NutritionResult& from);

  inline NutritionResult& operator=(const NutritionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NutritionResult& default_instance();

  void Swap(NutritionResult* other);

  // implements Message ----------------------------------------------

  NutritionResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NutritionResult& from);
  void MergeFrom(const NutritionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float nutrition = 1 [packed = true];
  inline int nutrition_size() const;
  inline void clear_nutrition();
  static const int kNutritionFieldNumber = 1;
  inline float nutrition(int index) const;
  inline void set_nutrition(int index, float value);
  inline void add_nutrition(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      nutrition() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_nutrition();

  // repeated float recommend = 2 [packed = true];
  inline int recommend_size() const;
  inline void clear_recommend();
  static const int kRecommendFieldNumber = 2;
  inline float recommend(int index) const;
  inline void set_recommend(int index, float value);
  inline void add_recommend(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      recommend() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_recommend();

  // @@protoc_insertion_point(class_scope:net.NutritionResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > nutrition_;
  mutable int _nutrition_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > recommend_;
  mutable int _recommend_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static NutritionResult* default_instance_;
};
// -------------------------------------------------------------------

class HealthRequest : public ::google::protobuf::Message {
 public:
  HealthRequest();
  virtual ~HealthRequest();

  HealthRequest(const HealthRequest& from);

  inline HealthRequest& operator=(const HealthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthRequest& default_instance();

  void Swap(HealthRequest* other);

  // implements Message ----------------------------------------------

  HealthRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HealthRequest& from);
  void MergeFrom(const HealthRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 gender = 2;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 2;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // required uint32 is_kid = 3;
  inline bool has_is_kid() const;
  inline void clear_is_kid();
  static const int kIsKidFieldNumber = 3;
  inline ::google::protobuf::uint32 is_kid() const;
  inline void set_is_kid(::google::protobuf::uint32 value);

  // repeated uint32 symptom = 4 [packed = true];
  inline int symptom_size() const;
  inline void clear_symptom();
  static const int kSymptomFieldNumber = 4;
  inline ::google::protobuf::uint32 symptom(int index) const;
  inline void set_symptom(int index, ::google::protobuf::uint32 value);
  inline void add_symptom(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      symptom() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_symptom();

  // @@protoc_insertion_point(class_scope:net.HealthRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_is_kid();
  inline void clear_has_is_kid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > symptom_;
  mutable int _symptom_cached_byte_size_;
  ::google::protobuf::uint32 is_kid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static HealthRequest* default_instance_;
};
// -------------------------------------------------------------------

class HealthResult : public ::google::protobuf::Message {
 public:
  HealthResult();
  virtual ~HealthResult();

  HealthResult(const HealthResult& from);

  inline HealthResult& operator=(const HealthResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthResult& default_instance();

  void Swap(HealthResult* other);

  // implements Message ----------------------------------------------

  HealthResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HealthResult& from);
  void MergeFrom(const HealthResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.UintFloatPair syndrome = 1;
  inline int syndrome_size() const;
  inline void clear_syndrome();
  static const int kSyndromeFieldNumber = 1;
  inline const ::net::UintFloatPair& syndrome(int index) const;
  inline ::net::UintFloatPair* mutable_syndrome(int index);
  inline ::net::UintFloatPair* add_syndrome();
  inline const ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >&
      syndrome() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >*
      mutable_syndrome();

  // optional bytes analyze = 2;
  inline bool has_analyze() const;
  inline void clear_analyze();
  static const int kAnalyzeFieldNumber = 2;
  inline const ::std::string& analyze() const;
  inline void set_analyze(const ::std::string& value);
  inline void set_analyze(const char* value);
  inline void set_analyze(const void* value, size_t size);
  inline ::std::string* mutable_analyze();
  inline ::std::string* release_analyze();
  inline void set_allocated_analyze(::std::string* analyze);

  // optional bytes recommend = 3;
  inline bool has_recommend() const;
  inline void clear_recommend();
  static const int kRecommendFieldNumber = 3;
  inline const ::std::string& recommend() const;
  inline void set_recommend(const ::std::string& value);
  inline void set_recommend(const char* value);
  inline void set_recommend(const void* value, size_t size);
  inline ::std::string* mutable_recommend();
  inline ::std::string* release_recommend();
  inline void set_allocated_recommend(::std::string* recommend);

  // optional uint32 symptom = 4;
  inline bool has_symptom() const;
  inline void clear_symptom();
  static const int kSymptomFieldNumber = 4;
  inline ::google::protobuf::uint32 symptom() const;
  inline void set_symptom(::google::protobuf::uint32 value);

  // optional bytes question = 5;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 5;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const void* value, size_t size);
  inline ::std::string* mutable_question();
  inline ::std::string* release_question();
  inline void set_allocated_question(::std::string* question);

  // @@protoc_insertion_point(class_scope:net.HealthResult)
 private:
  inline void set_has_analyze();
  inline void clear_has_analyze();
  inline void set_has_recommend();
  inline void clear_has_recommend();
  inline void set_has_symptom();
  inline void clear_has_symptom();
  inline void set_has_question();
  inline void clear_has_question();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair > syndrome_;
  ::std::string* analyze_;
  ::std::string* recommend_;
  ::std::string* question_;
  ::google::protobuf::uint32 symptom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static HealthResult* default_instance_;
};
// -------------------------------------------------------------------

class DataRequest : public ::google::protobuf::Message {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRequest& default_instance();

  void Swap(DataRequest* other);

  // implements Message ----------------------------------------------

  DataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // optional bytes keyword = 2;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 2;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const void* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.DataRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_keyword();
  inline void clear_has_keyword();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* keyword_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static DataRequest* default_instance_;
};
// -------------------------------------------------------------------

class DataResult : public ::google::protobuf::Message {
 public:
  DataResult();
  virtual ~DataResult();

  DataResult(const DataResult& from);

  inline DataResult& operator=(const DataResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataResult& default_instance();

  void Swap(DataResult* other);

  // implements Message ----------------------------------------------

  DataResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataResult& from);
  void MergeFrom(const DataResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1 [packed = true];
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:net.DataResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  mutable int _id_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_netmessage_2eproto();
  friend void protobuf_AssignDesc_netmessage_2eproto();
  friend void protobuf_ShutdownFile_netmessage_2eproto();

  void InitAsDefaultInstance();
  static DataResult* default_instance_;
};
// ===================================================================


// ===================================================================

// PageRequest

// required uint32 request_id = 1;
inline bool PageRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 PageRequest::request_id() const {
  return request_id_;
}
inline void PageRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// optional uint32 user_id = 2;
inline bool PageRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageRequest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 PageRequest::user_id() const {
  return user_id_;
}
inline void PageRequest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .net.AccountRequest account_request = 3;
inline bool PageRequest::has_account_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageRequest::set_has_account_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageRequest::clear_has_account_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageRequest::clear_account_request() {
  if (account_request_ != NULL) account_request_->::net::AccountRequest::Clear();
  clear_has_account_request();
}
inline const ::net::AccountRequest& PageRequest::account_request() const {
  return account_request_ != NULL ? *account_request_ : *default_instance_->account_request_;
}
inline ::net::AccountRequest* PageRequest::mutable_account_request() {
  set_has_account_request();
  if (account_request_ == NULL) account_request_ = new ::net::AccountRequest;
  return account_request_;
}
inline ::net::AccountRequest* PageRequest::release_account_request() {
  clear_has_account_request();
  ::net::AccountRequest* temp = account_request_;
  account_request_ = NULL;
  return temp;
}
inline void PageRequest::set_allocated_account_request(::net::AccountRequest* account_request) {
  delete account_request_;
  account_request_ = account_request;
  if (account_request) {
    set_has_account_request();
  } else {
    clear_has_account_request();
  }
}

// optional .net.FoodRequest food_request = 4;
inline bool PageRequest::has_food_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageRequest::set_has_food_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PageRequest::clear_has_food_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PageRequest::clear_food_request() {
  if (food_request_ != NULL) food_request_->::net::FoodRequest::Clear();
  clear_has_food_request();
}
inline const ::net::FoodRequest& PageRequest::food_request() const {
  return food_request_ != NULL ? *food_request_ : *default_instance_->food_request_;
}
inline ::net::FoodRequest* PageRequest::mutable_food_request() {
  set_has_food_request();
  if (food_request_ == NULL) food_request_ = new ::net::FoodRequest;
  return food_request_;
}
inline ::net::FoodRequest* PageRequest::release_food_request() {
  clear_has_food_request();
  ::net::FoodRequest* temp = food_request_;
  food_request_ = NULL;
  return temp;
}
inline void PageRequest::set_allocated_food_request(::net::FoodRequest* food_request) {
  delete food_request_;
  food_request_ = food_request;
  if (food_request) {
    set_has_food_request();
  } else {
    clear_has_food_request();
  }
}

// optional .net.NutritionRequest nutrition_request = 5;
inline bool PageRequest::has_nutrition_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageRequest::set_has_nutrition_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PageRequest::clear_has_nutrition_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PageRequest::clear_nutrition_request() {
  if (nutrition_request_ != NULL) nutrition_request_->::net::NutritionRequest::Clear();
  clear_has_nutrition_request();
}
inline const ::net::NutritionRequest& PageRequest::nutrition_request() const {
  return nutrition_request_ != NULL ? *nutrition_request_ : *default_instance_->nutrition_request_;
}
inline ::net::NutritionRequest* PageRequest::mutable_nutrition_request() {
  set_has_nutrition_request();
  if (nutrition_request_ == NULL) nutrition_request_ = new ::net::NutritionRequest;
  return nutrition_request_;
}
inline ::net::NutritionRequest* PageRequest::release_nutrition_request() {
  clear_has_nutrition_request();
  ::net::NutritionRequest* temp = nutrition_request_;
  nutrition_request_ = NULL;
  return temp;
}
inline void PageRequest::set_allocated_nutrition_request(::net::NutritionRequest* nutrition_request) {
  delete nutrition_request_;
  nutrition_request_ = nutrition_request;
  if (nutrition_request) {
    set_has_nutrition_request();
  } else {
    clear_has_nutrition_request();
  }
}

// optional .net.HealthRequest health_request = 6;
inline bool PageRequest::has_health_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PageRequest::set_has_health_request() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PageRequest::clear_has_health_request() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PageRequest::clear_health_request() {
  if (health_request_ != NULL) health_request_->::net::HealthRequest::Clear();
  clear_has_health_request();
}
inline const ::net::HealthRequest& PageRequest::health_request() const {
  return health_request_ != NULL ? *health_request_ : *default_instance_->health_request_;
}
inline ::net::HealthRequest* PageRequest::mutable_health_request() {
  set_has_health_request();
  if (health_request_ == NULL) health_request_ = new ::net::HealthRequest;
  return health_request_;
}
inline ::net::HealthRequest* PageRequest::release_health_request() {
  clear_has_health_request();
  ::net::HealthRequest* temp = health_request_;
  health_request_ = NULL;
  return temp;
}
inline void PageRequest::set_allocated_health_request(::net::HealthRequest* health_request) {
  delete health_request_;
  health_request_ = health_request;
  if (health_request) {
    set_has_health_request();
  } else {
    clear_has_health_request();
  }
}

// optional .net.DataRequest data_request = 7;
inline bool PageRequest::has_data_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PageRequest::set_has_data_request() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PageRequest::clear_has_data_request() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PageRequest::clear_data_request() {
  if (data_request_ != NULL) data_request_->::net::DataRequest::Clear();
  clear_has_data_request();
}
inline const ::net::DataRequest& PageRequest::data_request() const {
  return data_request_ != NULL ? *data_request_ : *default_instance_->data_request_;
}
inline ::net::DataRequest* PageRequest::mutable_data_request() {
  set_has_data_request();
  if (data_request_ == NULL) data_request_ = new ::net::DataRequest;
  return data_request_;
}
inline ::net::DataRequest* PageRequest::release_data_request() {
  clear_has_data_request();
  ::net::DataRequest* temp = data_request_;
  data_request_ = NULL;
  return temp;
}
inline void PageRequest::set_allocated_data_request(::net::DataRequest* data_request) {
  delete data_request_;
  data_request_ = data_request;
  if (data_request) {
    set_has_data_request();
  } else {
    clear_has_data_request();
  }
}

// -------------------------------------------------------------------

// PageResult

// optional .net.AccountResult account_result = 1;
inline bool PageResult::has_account_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageResult::set_has_account_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageResult::clear_has_account_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageResult::clear_account_result() {
  if (account_result_ != NULL) account_result_->::net::AccountResult::Clear();
  clear_has_account_result();
}
inline const ::net::AccountResult& PageResult::account_result() const {
  return account_result_ != NULL ? *account_result_ : *default_instance_->account_result_;
}
inline ::net::AccountResult* PageResult::mutable_account_result() {
  set_has_account_result();
  if (account_result_ == NULL) account_result_ = new ::net::AccountResult;
  return account_result_;
}
inline ::net::AccountResult* PageResult::release_account_result() {
  clear_has_account_result();
  ::net::AccountResult* temp = account_result_;
  account_result_ = NULL;
  return temp;
}
inline void PageResult::set_allocated_account_result(::net::AccountResult* account_result) {
  delete account_result_;
  account_result_ = account_result;
  if (account_result) {
    set_has_account_result();
  } else {
    clear_has_account_result();
  }
}

// optional .net.FoodResult food_result = 2;
inline bool PageResult::has_food_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageResult::set_has_food_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageResult::clear_has_food_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageResult::clear_food_result() {
  if (food_result_ != NULL) food_result_->::net::FoodResult::Clear();
  clear_has_food_result();
}
inline const ::net::FoodResult& PageResult::food_result() const {
  return food_result_ != NULL ? *food_result_ : *default_instance_->food_result_;
}
inline ::net::FoodResult* PageResult::mutable_food_result() {
  set_has_food_result();
  if (food_result_ == NULL) food_result_ = new ::net::FoodResult;
  return food_result_;
}
inline ::net::FoodResult* PageResult::release_food_result() {
  clear_has_food_result();
  ::net::FoodResult* temp = food_result_;
  food_result_ = NULL;
  return temp;
}
inline void PageResult::set_allocated_food_result(::net::FoodResult* food_result) {
  delete food_result_;
  food_result_ = food_result;
  if (food_result) {
    set_has_food_result();
  } else {
    clear_has_food_result();
  }
}

// optional .net.NutritionResult nutrition_result = 3;
inline bool PageResult::has_nutrition_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageResult::set_has_nutrition_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageResult::clear_has_nutrition_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageResult::clear_nutrition_result() {
  if (nutrition_result_ != NULL) nutrition_result_->::net::NutritionResult::Clear();
  clear_has_nutrition_result();
}
inline const ::net::NutritionResult& PageResult::nutrition_result() const {
  return nutrition_result_ != NULL ? *nutrition_result_ : *default_instance_->nutrition_result_;
}
inline ::net::NutritionResult* PageResult::mutable_nutrition_result() {
  set_has_nutrition_result();
  if (nutrition_result_ == NULL) nutrition_result_ = new ::net::NutritionResult;
  return nutrition_result_;
}
inline ::net::NutritionResult* PageResult::release_nutrition_result() {
  clear_has_nutrition_result();
  ::net::NutritionResult* temp = nutrition_result_;
  nutrition_result_ = NULL;
  return temp;
}
inline void PageResult::set_allocated_nutrition_result(::net::NutritionResult* nutrition_result) {
  delete nutrition_result_;
  nutrition_result_ = nutrition_result;
  if (nutrition_result) {
    set_has_nutrition_result();
  } else {
    clear_has_nutrition_result();
  }
}

// optional .net.HealthResult health_result = 4;
inline bool PageResult::has_health_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageResult::set_has_health_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PageResult::clear_has_health_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PageResult::clear_health_result() {
  if (health_result_ != NULL) health_result_->::net::HealthResult::Clear();
  clear_has_health_result();
}
inline const ::net::HealthResult& PageResult::health_result() const {
  return health_result_ != NULL ? *health_result_ : *default_instance_->health_result_;
}
inline ::net::HealthResult* PageResult::mutable_health_result() {
  set_has_health_result();
  if (health_result_ == NULL) health_result_ = new ::net::HealthResult;
  return health_result_;
}
inline ::net::HealthResult* PageResult::release_health_result() {
  clear_has_health_result();
  ::net::HealthResult* temp = health_result_;
  health_result_ = NULL;
  return temp;
}
inline void PageResult::set_allocated_health_result(::net::HealthResult* health_result) {
  delete health_result_;
  health_result_ = health_result;
  if (health_result) {
    set_has_health_result();
  } else {
    clear_has_health_result();
  }
}

// optional .net.DataResult data_result = 5;
inline bool PageResult::has_data_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageResult::set_has_data_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PageResult::clear_has_data_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PageResult::clear_data_result() {
  if (data_result_ != NULL) data_result_->::net::DataResult::Clear();
  clear_has_data_result();
}
inline const ::net::DataResult& PageResult::data_result() const {
  return data_result_ != NULL ? *data_result_ : *default_instance_->data_result_;
}
inline ::net::DataResult* PageResult::mutable_data_result() {
  set_has_data_result();
  if (data_result_ == NULL) data_result_ = new ::net::DataResult;
  return data_result_;
}
inline ::net::DataResult* PageResult::release_data_result() {
  clear_has_data_result();
  ::net::DataResult* temp = data_result_;
  data_result_ = NULL;
  return temp;
}
inline void PageResult::set_allocated_data_result(::net::DataResult* data_result) {
  delete data_result_;
  data_result_ = data_result;
  if (data_result) {
    set_has_data_result();
  } else {
    clear_has_data_result();
  }
}

// -------------------------------------------------------------------

// UintFloatPair

// required uint32 int_value = 1;
inline bool UintFloatPair::has_int_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UintFloatPair::set_has_int_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UintFloatPair::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UintFloatPair::clear_int_value() {
  int_value_ = 0u;
  clear_has_int_value();
}
inline ::google::protobuf::uint32 UintFloatPair::int_value() const {
  return int_value_;
}
inline void UintFloatPair::set_int_value(::google::protobuf::uint32 value) {
  set_has_int_value();
  int_value_ = value;
}

// required float float_value = 2;
inline bool UintFloatPair::has_float_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UintFloatPair::set_has_float_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UintFloatPair::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UintFloatPair::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float UintFloatPair::float_value() const {
  return float_value_;
}
inline void UintFloatPair::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
}

// -------------------------------------------------------------------

// Date

// required uint32 year = 1;
inline bool Date::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Date::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Date::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Date::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 Date::year() const {
  return year_;
}
inline void Date::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
}

// required uint32 month = 2;
inline bool Date::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Date::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Date::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Date::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 Date::month() const {
  return month_;
}
inline void Date::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// required uint32 day = 3;
inline bool Date::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Date::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Date::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Date::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 Date::day() const {
  return day_;
}
inline void Date::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// AccountRequest

// required uint32 request_id = 1;
inline bool AccountRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 AccountRequest::request_id() const {
  return request_id_;
}
inline void AccountRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// required bytes username = 2;
inline bool AccountRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AccountRequest::username() const {
  return *username_;
}
inline void AccountRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AccountRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AccountRequest::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* AccountRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes password = 3;
inline bool AccountRequest::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountRequest::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AccountRequest::password() const {
  return *password_;
}
inline void AccountRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AccountRequest::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AccountRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .net.Date birthday = 4;
inline bool AccountRequest::has_birthday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountRequest::set_has_birthday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountRequest::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountRequest::clear_birthday() {
  if (birthday_ != NULL) birthday_->::net::Date::Clear();
  clear_has_birthday();
}
inline const ::net::Date& AccountRequest::birthday() const {
  return birthday_ != NULL ? *birthday_ : *default_instance_->birthday_;
}
inline ::net::Date* AccountRequest::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == NULL) birthday_ = new ::net::Date;
  return birthday_;
}
inline ::net::Date* AccountRequest::release_birthday() {
  clear_has_birthday();
  ::net::Date* temp = birthday_;
  birthday_ = NULL;
  return temp;
}
inline void AccountRequest::set_allocated_birthday(::net::Date* birthday) {
  delete birthday_;
  birthday_ = birthday;
  if (birthday) {
    set_has_birthday();
  } else {
    clear_has_birthday();
  }
}

// optional uint32 gender = 5;
inline bool AccountRequest::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountRequest::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountRequest::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountRequest::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 AccountRequest::gender() const {
  return gender_;
}
inline void AccountRequest::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 labor_type = 6;
inline bool AccountRequest::has_labor_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountRequest::set_has_labor_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountRequest::clear_has_labor_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountRequest::clear_labor_type() {
  labor_type_ = 0u;
  clear_has_labor_type();
}
inline ::google::protobuf::uint32 AccountRequest::labor_type() const {
  return labor_type_;
}
inline void AccountRequest::set_labor_type(::google::protobuf::uint32 value) {
  set_has_labor_type();
  labor_type_ = value;
}

// optional float height = 7;
inline bool AccountRequest::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountRequest::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountRequest::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float AccountRequest::height() const {
  return height_;
}
inline void AccountRequest::set_height(float value) {
  set_has_height();
  height_ = value;
}

// optional float weight = 8;
inline bool AccountRequest::has_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountRequest::set_has_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountRequest::clear_has_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountRequest::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float AccountRequest::weight() const {
  return weight_;
}
inline void AccountRequest::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// AccountResult

// required uint32 user_id = 1;
inline bool AccountResult::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountResult::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountResult::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountResult::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 AccountResult::user_id() const {
  return user_id_;
}
inline void AccountResult::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bytes error_message = 2;
inline bool AccountResult::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountResult::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountResult::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountResult::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& AccountResult::error_message() const {
  return *error_message_;
}
inline void AccountResult::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void AccountResult::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void AccountResult::set_error_message(const void* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountResult::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* AccountResult::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountResult::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FoodRequest

// optional uint32 eater_num = 1;
inline bool FoodRequest::has_eater_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodRequest::set_has_eater_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodRequest::clear_has_eater_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodRequest::clear_eater_num() {
  eater_num_ = 0u;
  clear_has_eater_num();
}
inline ::google::protobuf::uint32 FoodRequest::eater_num() const {
  return eater_num_;
}
inline void FoodRequest::set_eater_num(::google::protobuf::uint32 value) {
  set_has_eater_num();
  eater_num_ = value;
}

// optional uint32 cuisine_type = 2;
inline bool FoodRequest::has_cuisine_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FoodRequest::set_has_cuisine_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FoodRequest::clear_has_cuisine_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FoodRequest::clear_cuisine_type() {
  cuisine_type_ = 0u;
  clear_has_cuisine_type();
}
inline ::google::protobuf::uint32 FoodRequest::cuisine_type() const {
  return cuisine_type_;
}
inline void FoodRequest::set_cuisine_type(::google::protobuf::uint32 value) {
  set_has_cuisine_type();
  cuisine_type_ = value;
}

// optional uint32 meal_type = 3;
inline bool FoodRequest::has_meal_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FoodRequest::set_has_meal_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FoodRequest::clear_has_meal_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FoodRequest::clear_meal_type() {
  meal_type_ = 0u;
  clear_has_meal_type();
}
inline ::google::protobuf::uint32 FoodRequest::meal_type() const {
  return meal_type_;
}
inline void FoodRequest::set_meal_type(::google::protobuf::uint32 value) {
  set_has_meal_type();
  meal_type_ = value;
}

// repeated .net.UintFloatPair exist_food = 4;
inline int FoodRequest::exist_food_size() const {
  return exist_food_.size();
}
inline void FoodRequest::clear_exist_food() {
  exist_food_.Clear();
}
inline const ::net::UintFloatPair& FoodRequest::exist_food(int index) const {
  return exist_food_.Get(index);
}
inline ::net::UintFloatPair* FoodRequest::mutable_exist_food(int index) {
  return exist_food_.Mutable(index);
}
inline ::net::UintFloatPair* FoodRequest::add_exist_food() {
  return exist_food_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >&
FoodRequest::exist_food() const {
  return exist_food_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >*
FoodRequest::mutable_exist_food() {
  return &exist_food_;
}

// repeated uint32 prefer_food = 5 [packed = true];
inline int FoodRequest::prefer_food_size() const {
  return prefer_food_.size();
}
inline void FoodRequest::clear_prefer_food() {
  prefer_food_.Clear();
}
inline ::google::protobuf::uint32 FoodRequest::prefer_food(int index) const {
  return prefer_food_.Get(index);
}
inline void FoodRequest::set_prefer_food(int index, ::google::protobuf::uint32 value) {
  prefer_food_.Set(index, value);
}
inline void FoodRequest::add_prefer_food(::google::protobuf::uint32 value) {
  prefer_food_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FoodRequest::prefer_food() const {
  return prefer_food_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FoodRequest::mutable_prefer_food() {
  return &prefer_food_;
}

// repeated uint32 hate_food = 6 [packed = true];
inline int FoodRequest::hate_food_size() const {
  return hate_food_.size();
}
inline void FoodRequest::clear_hate_food() {
  hate_food_.Clear();
}
inline ::google::protobuf::uint32 FoodRequest::hate_food(int index) const {
  return hate_food_.Get(index);
}
inline void FoodRequest::set_hate_food(int index, ::google::protobuf::uint32 value) {
  hate_food_.Set(index, value);
}
inline void FoodRequest::add_hate_food(::google::protobuf::uint32 value) {
  hate_food_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FoodRequest::hate_food() const {
  return hate_food_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FoodRequest::mutable_hate_food() {
  return &hate_food_;
}

// repeated uint32 selected_dish = 7 [packed = true];
inline int FoodRequest::selected_dish_size() const {
  return selected_dish_.size();
}
inline void FoodRequest::clear_selected_dish() {
  selected_dish_.Clear();
}
inline ::google::protobuf::uint32 FoodRequest::selected_dish(int index) const {
  return selected_dish_.Get(index);
}
inline void FoodRequest::set_selected_dish(int index, ::google::protobuf::uint32 value) {
  selected_dish_.Set(index, value);
}
inline void FoodRequest::add_selected_dish(::google::protobuf::uint32 value) {
  selected_dish_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FoodRequest::selected_dish() const {
  return selected_dish_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FoodRequest::mutable_selected_dish() {
  return &selected_dish_;
}

// -------------------------------------------------------------------

// FoodResult

// repeated .net.UintFloatPair recipe = 1;
inline int FoodResult::recipe_size() const {
  return recipe_.size();
}
inline void FoodResult::clear_recipe() {
  recipe_.Clear();
}
inline const ::net::UintFloatPair& FoodResult::recipe(int index) const {
  return recipe_.Get(index);
}
inline ::net::UintFloatPair* FoodResult::mutable_recipe(int index) {
  return recipe_.Mutable(index);
}
inline ::net::UintFloatPair* FoodResult::add_recipe() {
  return recipe_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >&
FoodResult::recipe() const {
  return recipe_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >*
FoodResult::mutable_recipe() {
  return &recipe_;
}

// -------------------------------------------------------------------

// NutritionRequest

// required uint32 request_id = 1;
inline bool NutritionRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NutritionRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NutritionRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NutritionRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 NutritionRequest::request_id() const {
  return request_id_;
}
inline void NutritionRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// repeated uint32 dish = 2 [packed = true];
inline int NutritionRequest::dish_size() const {
  return dish_.size();
}
inline void NutritionRequest::clear_dish() {
  dish_.Clear();
}
inline ::google::protobuf::uint32 NutritionRequest::dish(int index) const {
  return dish_.Get(index);
}
inline void NutritionRequest::set_dish(int index, ::google::protobuf::uint32 value) {
  dish_.Set(index, value);
}
inline void NutritionRequest::add_dish(::google::protobuf::uint32 value) {
  dish_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NutritionRequest::dish() const {
  return dish_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NutritionRequest::mutable_dish() {
  return &dish_;
}

// -------------------------------------------------------------------

// NutritionResult

// repeated float nutrition = 1 [packed = true];
inline int NutritionResult::nutrition_size() const {
  return nutrition_.size();
}
inline void NutritionResult::clear_nutrition() {
  nutrition_.Clear();
}
inline float NutritionResult::nutrition(int index) const {
  return nutrition_.Get(index);
}
inline void NutritionResult::set_nutrition(int index, float value) {
  nutrition_.Set(index, value);
}
inline void NutritionResult::add_nutrition(float value) {
  nutrition_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
NutritionResult::nutrition() const {
  return nutrition_;
}
inline ::google::protobuf::RepeatedField< float >*
NutritionResult::mutable_nutrition() {
  return &nutrition_;
}

// repeated float recommend = 2 [packed = true];
inline int NutritionResult::recommend_size() const {
  return recommend_.size();
}
inline void NutritionResult::clear_recommend() {
  recommend_.Clear();
}
inline float NutritionResult::recommend(int index) const {
  return recommend_.Get(index);
}
inline void NutritionResult::set_recommend(int index, float value) {
  recommend_.Set(index, value);
}
inline void NutritionResult::add_recommend(float value) {
  recommend_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
NutritionResult::recommend() const {
  return recommend_;
}
inline ::google::protobuf::RepeatedField< float >*
NutritionResult::mutable_recommend() {
  return &recommend_;
}

// -------------------------------------------------------------------

// HealthRequest

// required uint32 request_id = 1;
inline bool HealthRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HealthRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HealthRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HealthRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 HealthRequest::request_id() const {
  return request_id_;
}
inline void HealthRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// required uint32 gender = 2;
inline bool HealthRequest::has_gender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HealthRequest::set_has_gender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HealthRequest::clear_has_gender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HealthRequest::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 HealthRequest::gender() const {
  return gender_;
}
inline void HealthRequest::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// required uint32 is_kid = 3;
inline bool HealthRequest::has_is_kid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HealthRequest::set_has_is_kid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HealthRequest::clear_has_is_kid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HealthRequest::clear_is_kid() {
  is_kid_ = 0u;
  clear_has_is_kid();
}
inline ::google::protobuf::uint32 HealthRequest::is_kid() const {
  return is_kid_;
}
inline void HealthRequest::set_is_kid(::google::protobuf::uint32 value) {
  set_has_is_kid();
  is_kid_ = value;
}

// repeated uint32 symptom = 4 [packed = true];
inline int HealthRequest::symptom_size() const {
  return symptom_.size();
}
inline void HealthRequest::clear_symptom() {
  symptom_.Clear();
}
inline ::google::protobuf::uint32 HealthRequest::symptom(int index) const {
  return symptom_.Get(index);
}
inline void HealthRequest::set_symptom(int index, ::google::protobuf::uint32 value) {
  symptom_.Set(index, value);
}
inline void HealthRequest::add_symptom(::google::protobuf::uint32 value) {
  symptom_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HealthRequest::symptom() const {
  return symptom_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HealthRequest::mutable_symptom() {
  return &symptom_;
}

// -------------------------------------------------------------------

// HealthResult

// repeated .net.UintFloatPair syndrome = 1;
inline int HealthResult::syndrome_size() const {
  return syndrome_.size();
}
inline void HealthResult::clear_syndrome() {
  syndrome_.Clear();
}
inline const ::net::UintFloatPair& HealthResult::syndrome(int index) const {
  return syndrome_.Get(index);
}
inline ::net::UintFloatPair* HealthResult::mutable_syndrome(int index) {
  return syndrome_.Mutable(index);
}
inline ::net::UintFloatPair* HealthResult::add_syndrome() {
  return syndrome_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >&
HealthResult::syndrome() const {
  return syndrome_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::UintFloatPair >*
HealthResult::mutable_syndrome() {
  return &syndrome_;
}

// optional bytes analyze = 2;
inline bool HealthResult::has_analyze() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HealthResult::set_has_analyze() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HealthResult::clear_has_analyze() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HealthResult::clear_analyze() {
  if (analyze_ != &::google::protobuf::internal::kEmptyString) {
    analyze_->clear();
  }
  clear_has_analyze();
}
inline const ::std::string& HealthResult::analyze() const {
  return *analyze_;
}
inline void HealthResult::set_analyze(const ::std::string& value) {
  set_has_analyze();
  if (analyze_ == &::google::protobuf::internal::kEmptyString) {
    analyze_ = new ::std::string;
  }
  analyze_->assign(value);
}
inline void HealthResult::set_analyze(const char* value) {
  set_has_analyze();
  if (analyze_ == &::google::protobuf::internal::kEmptyString) {
    analyze_ = new ::std::string;
  }
  analyze_->assign(value);
}
inline void HealthResult::set_analyze(const void* value, size_t size) {
  set_has_analyze();
  if (analyze_ == &::google::protobuf::internal::kEmptyString) {
    analyze_ = new ::std::string;
  }
  analyze_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HealthResult::mutable_analyze() {
  set_has_analyze();
  if (analyze_ == &::google::protobuf::internal::kEmptyString) {
    analyze_ = new ::std::string;
  }
  return analyze_;
}
inline ::std::string* HealthResult::release_analyze() {
  clear_has_analyze();
  if (analyze_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = analyze_;
    analyze_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HealthResult::set_allocated_analyze(::std::string* analyze) {
  if (analyze_ != &::google::protobuf::internal::kEmptyString) {
    delete analyze_;
  }
  if (analyze) {
    set_has_analyze();
    analyze_ = analyze;
  } else {
    clear_has_analyze();
    analyze_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes recommend = 3;
inline bool HealthResult::has_recommend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HealthResult::set_has_recommend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HealthResult::clear_has_recommend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HealthResult::clear_recommend() {
  if (recommend_ != &::google::protobuf::internal::kEmptyString) {
    recommend_->clear();
  }
  clear_has_recommend();
}
inline const ::std::string& HealthResult::recommend() const {
  return *recommend_;
}
inline void HealthResult::set_recommend(const ::std::string& value) {
  set_has_recommend();
  if (recommend_ == &::google::protobuf::internal::kEmptyString) {
    recommend_ = new ::std::string;
  }
  recommend_->assign(value);
}
inline void HealthResult::set_recommend(const char* value) {
  set_has_recommend();
  if (recommend_ == &::google::protobuf::internal::kEmptyString) {
    recommend_ = new ::std::string;
  }
  recommend_->assign(value);
}
inline void HealthResult::set_recommend(const void* value, size_t size) {
  set_has_recommend();
  if (recommend_ == &::google::protobuf::internal::kEmptyString) {
    recommend_ = new ::std::string;
  }
  recommend_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HealthResult::mutable_recommend() {
  set_has_recommend();
  if (recommend_ == &::google::protobuf::internal::kEmptyString) {
    recommend_ = new ::std::string;
  }
  return recommend_;
}
inline ::std::string* HealthResult::release_recommend() {
  clear_has_recommend();
  if (recommend_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recommend_;
    recommend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HealthResult::set_allocated_recommend(::std::string* recommend) {
  if (recommend_ != &::google::protobuf::internal::kEmptyString) {
    delete recommend_;
  }
  if (recommend) {
    set_has_recommend();
    recommend_ = recommend;
  } else {
    clear_has_recommend();
    recommend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 symptom = 4;
inline bool HealthResult::has_symptom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HealthResult::set_has_symptom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HealthResult::clear_has_symptom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HealthResult::clear_symptom() {
  symptom_ = 0u;
  clear_has_symptom();
}
inline ::google::protobuf::uint32 HealthResult::symptom() const {
  return symptom_;
}
inline void HealthResult::set_symptom(::google::protobuf::uint32 value) {
  set_has_symptom();
  symptom_ = value;
}

// optional bytes question = 5;
inline bool HealthResult::has_question() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HealthResult::set_has_question() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HealthResult::clear_has_question() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HealthResult::clear_question() {
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    question_->clear();
  }
  clear_has_question();
}
inline const ::std::string& HealthResult::question() const {
  return *question_;
}
inline void HealthResult::set_question(const ::std::string& value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void HealthResult::set_question(const char* value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(value);
}
inline void HealthResult::set_question(const void* value, size_t size) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HealthResult::mutable_question() {
  set_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    question_ = new ::std::string;
  }
  return question_;
}
inline ::std::string* HealthResult::release_question() {
  clear_has_question();
  if (question_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = question_;
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HealthResult::set_allocated_question(::std::string* question) {
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (question) {
    set_has_question();
    question_ = question;
  } else {
    clear_has_question();
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataRequest

// required uint32 request_id = 1;
inline bool DataRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 DataRequest::request_id() const {
  return request_id_;
}
inline void DataRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// optional bytes keyword = 2;
inline bool DataRequest::has_keyword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataRequest::set_has_keyword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataRequest::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataRequest::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& DataRequest::keyword() const {
  return *keyword_;
}
inline void DataRequest::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void DataRequest::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void DataRequest::set_keyword(const void* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataRequest::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    keyword_ = new ::std::string;
  }
  return keyword_;
}
inline ::std::string* DataRequest::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataRequest::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 3;
inline bool DataRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 DataRequest::type() const {
  return type_;
}
inline void DataRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// DataResult

// repeated uint32 id = 1 [packed = true];
inline int DataResult::id_size() const {
  return id_.size();
}
inline void DataResult::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 DataResult::id(int index) const {
  return id_.Get(index);
}
inline void DataResult::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void DataResult::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataResult::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataResult::mutable_id() {
  return &id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_netmessage_2eproto__INCLUDED
