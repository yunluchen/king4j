// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* PageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PageResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PageResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UintFloatPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UintFloatPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Date_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Date_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* NutritionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NutritionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NutritionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NutritionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_netmessage_2eproto() {
  protobuf_AddDesc_netmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "netmessage.proto");
  GOOGLE_CHECK(file != NULL);
  PageRequest_descriptor_ = file->message_type(0);
  static const int PageRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, account_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, food_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, nutrition_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, health_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, data_request_),
  };
  PageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PageRequest_descriptor_,
      PageRequest::default_instance_,
      PageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PageRequest));
  PageResult_descriptor_ = file->message_type(1);
  static const int PageResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, account_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, food_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, nutrition_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, health_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, data_result_),
  };
  PageResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PageResult_descriptor_,
      PageResult::default_instance_,
      PageResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PageResult));
  UintFloatPair_descriptor_ = file->message_type(2);
  static const int UintFloatPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UintFloatPair, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UintFloatPair, float_value_),
  };
  UintFloatPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UintFloatPair_descriptor_,
      UintFloatPair::default_instance_,
      UintFloatPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UintFloatPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UintFloatPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UintFloatPair));
  Date_descriptor_ = file->message_type(3);
  static const int Date_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, day_),
  };
  Date_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Date_descriptor_,
      Date::default_instance_,
      Date_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Date));
  AccountRequest_descriptor_ = file->message_type(4);
  static const int AccountRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, labor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, weight_),
  };
  AccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRequest_descriptor_,
      AccountRequest::default_instance_,
      AccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRequest));
  AccountResult_descriptor_ = file->message_type(5);
  static const int AccountResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResult, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResult, error_message_),
  };
  AccountResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountResult_descriptor_,
      AccountResult::default_instance_,
      AccountResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountResult));
  FoodRequest_descriptor_ = file->message_type(6);
  static const int FoodRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, eater_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, cuisine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, meal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, exist_food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, prefer_food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, hate_food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, selected_dish_),
  };
  FoodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodRequest_descriptor_,
      FoodRequest::default_instance_,
      FoodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodRequest));
  FoodResult_descriptor_ = file->message_type(7);
  static const int FoodResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodResult, recipe_),
  };
  FoodResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodResult_descriptor_,
      FoodResult::default_instance_,
      FoodResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodResult));
  NutritionRequest_descriptor_ = file->message_type(8);
  static const int NutritionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionRequest, dish_),
  };
  NutritionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NutritionRequest_descriptor_,
      NutritionRequest::default_instance_,
      NutritionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NutritionRequest));
  NutritionResult_descriptor_ = file->message_type(9);
  static const int NutritionResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionResult, nutrition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionResult, recommend_),
  };
  NutritionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NutritionResult_descriptor_,
      NutritionResult::default_instance_,
      NutritionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NutritionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NutritionResult));
  HealthRequest_descriptor_ = file->message_type(10);
  static const int HealthRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, is_kid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, symptom_),
  };
  HealthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthRequest_descriptor_,
      HealthRequest::default_instance_,
      HealthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthRequest));
  HealthResult_descriptor_ = file->message_type(11);
  static const int HealthResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, syndrome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, analyze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, recommend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, symptom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, question_),
  };
  HealthResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthResult_descriptor_,
      HealthResult::default_instance_,
      HealthResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthResult));
  DataRequest_descriptor_ = file->message_type(12);
  static const int DataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, type_),
  };
  DataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataRequest_descriptor_,
      DataRequest::default_instance_,
      DataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataRequest));
  DataResult_descriptor_ = file->message_type(13);
  static const int DataResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, id_),
  };
  DataResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataResult_descriptor_,
      DataResult::default_instance_,
      DataResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_netmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PageRequest_descriptor_, &PageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PageResult_descriptor_, &PageResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UintFloatPair_descriptor_, &UintFloatPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Date_descriptor_, &Date::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRequest_descriptor_, &AccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountResult_descriptor_, &AccountResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodRequest_descriptor_, &FoodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodResult_descriptor_, &FoodResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NutritionRequest_descriptor_, &NutritionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NutritionResult_descriptor_, &NutritionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthRequest_descriptor_, &HealthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthResult_descriptor_, &HealthResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataRequest_descriptor_, &DataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataResult_descriptor_, &DataResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_netmessage_2eproto() {
  delete PageRequest::default_instance_;
  delete PageRequest_reflection_;
  delete PageResult::default_instance_;
  delete PageResult_reflection_;
  delete UintFloatPair::default_instance_;
  delete UintFloatPair_reflection_;
  delete Date::default_instance_;
  delete Date_reflection_;
  delete AccountRequest::default_instance_;
  delete AccountRequest_reflection_;
  delete AccountResult::default_instance_;
  delete AccountResult_reflection_;
  delete FoodRequest::default_instance_;
  delete FoodRequest_reflection_;
  delete FoodResult::default_instance_;
  delete FoodResult_reflection_;
  delete NutritionRequest::default_instance_;
  delete NutritionRequest_reflection_;
  delete NutritionResult::default_instance_;
  delete NutritionResult_reflection_;
  delete HealthRequest::default_instance_;
  delete HealthRequest_reflection_;
  delete HealthResult::default_instance_;
  delete HealthResult_reflection_;
  delete DataRequest::default_instance_;
  delete DataRequest_reflection_;
  delete DataResult::default_instance_;
  delete DataResult_reflection_;
}

void protobuf_AddDesc_netmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020netmessage.proto\022\003net\"\216\002\n\013PageRequest\022"
    "\022\n\nrequest_id\030\001 \002(\r\022\017\n\007user_id\030\002 \001(\r\022,\n\017"
    "account_request\030\003 \001(\0132\023.net.AccountReque"
    "st\022&\n\014food_request\030\004 \001(\0132\020.net.FoodReque"
    "st\0220\n\021nutrition_request\030\005 \001(\0132\025.net.Nutr"
    "itionRequest\022*\n\016health_request\030\006 \001(\0132\022.n"
    "et.HealthRequest\022&\n\014data_request\030\007 \001(\0132\020"
    ".net.DataRequest\"\336\001\n\nPageResult\022*\n\016accou"
    "nt_result\030\001 \001(\0132\022.net.AccountResult\022$\n\013f"
    "ood_result\030\002 \001(\0132\017.net.FoodResult\022.\n\020nut"
    "rition_result\030\003 \001(\0132\024.net.NutritionResul"
    "t\022(\n\rhealth_result\030\004 \001(\0132\021.net.HealthRes"
    "ult\022$\n\013data_result\030\005 \001(\0132\017.net.DataResul"
    "t\"7\n\rUintFloatPair\022\021\n\tint_value\030\001 \002(\r\022\023\n"
    "\013float_value\030\002 \002(\002\"0\n\004Date\022\014\n\004year\030\001 \002(\r"
    "\022\r\n\005month\030\002 \002(\r\022\013\n\003day\030\003 \002(\r\"\251\001\n\016Account"
    "Request\022\022\n\nrequest_id\030\001 \002(\r\022\020\n\010username\030"
    "\002 \002(\014\022\020\n\010password\030\003 \002(\014\022\033\n\010birthday\030\004 \001("
    "\0132\t.net.Date\022\016\n\006gender\030\005 \001(\r\022\022\n\nlabor_ty"
    "pe\030\006 \001(\r\022\016\n\006height\030\007 \001(\002\022\016\n\006weight\030\010 \001(\002"
    "\"7\n\rAccountResult\022\017\n\007user_id\030\001 \002(\r\022\025\n\rer"
    "ror_message\030\002 \001(\014\"\274\001\n\013FoodRequest\022\021\n\teat"
    "er_num\030\001 \001(\r\022\024\n\014cuisine_type\030\002 \001(\r\022\021\n\tme"
    "al_type\030\003 \001(\r\022&\n\nexist_food\030\004 \003(\0132\022.net."
    "UintFloatPair\022\027\n\013prefer_food\030\005 \003(\rB\002\020\001\022\025"
    "\n\thate_food\030\006 \003(\rB\002\020\001\022\031\n\rselected_dish\030\007"
    " \003(\rB\002\020\001\"0\n\nFoodResult\022\"\n\006recipe\030\001 \003(\0132\022"
    ".net.UintFloatPair\"8\n\020NutritionRequest\022\022"
    "\n\nrequest_id\030\001 \002(\r\022\020\n\004dish\030\002 \003(\rB\002\020\001\"\?\n\017"
    "NutritionResult\022\025\n\tnutrition\030\001 \003(\002B\002\020\001\022\025"
    "\n\trecommend\030\002 \003(\002B\002\020\001\"X\n\rHealthRequest\022\022"
    "\n\nrequest_id\030\001 \002(\r\022\016\n\006gender\030\002 \002(\r\022\016\n\006is"
    "_kid\030\003 \002(\r\022\023\n\007symptom\030\004 \003(\rB\002\020\001\"{\n\014Healt"
    "hResult\022$\n\010syndrome\030\001 \003(\0132\022.net.UintFloa"
    "tPair\022\017\n\007analyze\030\002 \001(\014\022\021\n\trecommend\030\003 \001("
    "\014\022\017\n\007symptom\030\004 \001(\r\022\020\n\010question\030\005 \001(\014\"@\n\013"
    "DataRequest\022\022\n\nrequest_id\030\001 \002(\r\022\017\n\007keywo"
    "rd\030\002 \001(\014\022\014\n\004type\030\003 \001(\r\"\034\n\nDataResult\022\016\n\002"
    "id\030\001 \003(\rB\002\020\001B \n\014com.king.netB\020NetMessage"
    "Protos", 1566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netmessage.proto", &protobuf_RegisterTypes);
  PageRequest::default_instance_ = new PageRequest();
  PageResult::default_instance_ = new PageResult();
  UintFloatPair::default_instance_ = new UintFloatPair();
  Date::default_instance_ = new Date();
  AccountRequest::default_instance_ = new AccountRequest();
  AccountResult::default_instance_ = new AccountResult();
  FoodRequest::default_instance_ = new FoodRequest();
  FoodResult::default_instance_ = new FoodResult();
  NutritionRequest::default_instance_ = new NutritionRequest();
  NutritionResult::default_instance_ = new NutritionResult();
  HealthRequest::default_instance_ = new HealthRequest();
  HealthResult::default_instance_ = new HealthResult();
  DataRequest::default_instance_ = new DataRequest();
  DataResult::default_instance_ = new DataResult();
  PageRequest::default_instance_->InitAsDefaultInstance();
  PageResult::default_instance_->InitAsDefaultInstance();
  UintFloatPair::default_instance_->InitAsDefaultInstance();
  Date::default_instance_->InitAsDefaultInstance();
  AccountRequest::default_instance_->InitAsDefaultInstance();
  AccountResult::default_instance_->InitAsDefaultInstance();
  FoodRequest::default_instance_->InitAsDefaultInstance();
  FoodResult::default_instance_->InitAsDefaultInstance();
  NutritionRequest::default_instance_->InitAsDefaultInstance();
  NutritionResult::default_instance_->InitAsDefaultInstance();
  HealthRequest::default_instance_->InitAsDefaultInstance();
  HealthResult::default_instance_->InitAsDefaultInstance();
  DataRequest::default_instance_->InitAsDefaultInstance();
  DataResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_netmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_netmessage_2eproto {
  StaticDescriptorInitializer_netmessage_2eproto() {
    protobuf_AddDesc_netmessage_2eproto();
  }
} static_descriptor_initializer_netmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PageRequest::kRequestIdFieldNumber;
const int PageRequest::kUserIdFieldNumber;
const int PageRequest::kAccountRequestFieldNumber;
const int PageRequest::kFoodRequestFieldNumber;
const int PageRequest::kNutritionRequestFieldNumber;
const int PageRequest::kHealthRequestFieldNumber;
const int PageRequest::kDataRequestFieldNumber;
#endif  // !_MSC_VER

PageRequest::PageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PageRequest::InitAsDefaultInstance() {
  account_request_ = const_cast< ::net::AccountRequest*>(&::net::AccountRequest::default_instance());
  food_request_ = const_cast< ::net::FoodRequest*>(&::net::FoodRequest::default_instance());
  nutrition_request_ = const_cast< ::net::NutritionRequest*>(&::net::NutritionRequest::default_instance());
  health_request_ = const_cast< ::net::HealthRequest*>(&::net::HealthRequest::default_instance());
  data_request_ = const_cast< ::net::DataRequest*>(&::net::DataRequest::default_instance());
}

PageRequest::PageRequest(const PageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PageRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  user_id_ = 0u;
  account_request_ = NULL;
  food_request_ = NULL;
  nutrition_request_ = NULL;
  health_request_ = NULL;
  data_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PageRequest::~PageRequest() {
  SharedDtor();
}

void PageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_request_;
    delete food_request_;
    delete nutrition_request_;
    delete health_request_;
    delete data_request_;
  }
}

void PageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PageRequest_descriptor_;
}

const PageRequest& PageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

PageRequest* PageRequest::default_instance_ = NULL;

PageRequest* PageRequest::New() const {
  return new PageRequest;
}

void PageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    user_id_ = 0u;
    if (has_account_request()) {
      if (account_request_ != NULL) account_request_->::net::AccountRequest::Clear();
    }
    if (has_food_request()) {
      if (food_request_ != NULL) food_request_->::net::FoodRequest::Clear();
    }
    if (has_nutrition_request()) {
      if (nutrition_request_ != NULL) nutrition_request_->::net::NutritionRequest::Clear();
    }
    if (has_health_request()) {
      if (health_request_ != NULL) health_request_->::net::HealthRequest::Clear();
    }
    if (has_data_request()) {
      if (data_request_ != NULL) data_request_->::net::DataRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_request;
        break;
      }

      // optional .net.AccountRequest account_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_food_request;
        break;
      }

      // optional .net.FoodRequest food_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_food_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nutrition_request;
        break;
      }

      // optional .net.NutritionRequest nutrition_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nutrition_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nutrition_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_health_request;
        break;
      }

      // optional .net.HealthRequest health_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_health_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_health_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data_request;
        break;
      }

      // optional .net.DataRequest data_request = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional .net.AccountRequest account_request = 3;
  if (has_account_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account_request(), output);
  }

  // optional .net.FoodRequest food_request = 4;
  if (has_food_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->food_request(), output);
  }

  // optional .net.NutritionRequest nutrition_request = 5;
  if (has_nutrition_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nutrition_request(), output);
  }

  // optional .net.HealthRequest health_request = 6;
  if (has_health_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->health_request(), output);
  }

  // optional .net.DataRequest data_request = 7;
  if (has_data_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional .net.AccountRequest account_request = 3;
  if (has_account_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account_request(), target);
  }

  // optional .net.FoodRequest food_request = 4;
  if (has_food_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->food_request(), target);
  }

  // optional .net.NutritionRequest nutrition_request = 5;
  if (has_nutrition_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nutrition_request(), target);
  }

  // optional .net.HealthRequest health_request = 6;
  if (has_health_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->health_request(), target);
  }

  // optional .net.DataRequest data_request = 7;
  if (has_data_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .net.AccountRequest account_request = 3;
    if (has_account_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_request());
    }

    // optional .net.FoodRequest food_request = 4;
    if (has_food_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food_request());
    }

    // optional .net.NutritionRequest nutrition_request = 5;
    if (has_nutrition_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nutrition_request());
    }

    // optional .net.HealthRequest health_request = 6;
    if (has_health_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_request());
    }

    // optional .net.DataRequest data_request = 7;
    if (has_data_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PageRequest::MergeFrom(const PageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_account_request()) {
      mutable_account_request()->::net::AccountRequest::MergeFrom(from.account_request());
    }
    if (from.has_food_request()) {
      mutable_food_request()->::net::FoodRequest::MergeFrom(from.food_request());
    }
    if (from.has_nutrition_request()) {
      mutable_nutrition_request()->::net::NutritionRequest::MergeFrom(from.nutrition_request());
    }
    if (from.has_health_request()) {
      mutable_health_request()->::net::HealthRequest::MergeFrom(from.health_request());
    }
    if (from.has_data_request()) {
      mutable_data_request()->::net::DataRequest::MergeFrom(from.data_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageRequest::CopyFrom(const PageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_account_request()) {
    if (!this->account_request().IsInitialized()) return false;
  }
  if (has_food_request()) {
    if (!this->food_request().IsInitialized()) return false;
  }
  if (has_nutrition_request()) {
    if (!this->nutrition_request().IsInitialized()) return false;
  }
  if (has_health_request()) {
    if (!this->health_request().IsInitialized()) return false;
  }
  if (has_data_request()) {
    if (!this->data_request().IsInitialized()) return false;
  }
  return true;
}

void PageRequest::Swap(PageRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(account_request_, other->account_request_);
    std::swap(food_request_, other->food_request_);
    std::swap(nutrition_request_, other->nutrition_request_);
    std::swap(health_request_, other->health_request_);
    std::swap(data_request_, other->data_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PageRequest_descriptor_;
  metadata.reflection = PageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PageResult::kAccountResultFieldNumber;
const int PageResult::kFoodResultFieldNumber;
const int PageResult::kNutritionResultFieldNumber;
const int PageResult::kHealthResultFieldNumber;
const int PageResult::kDataResultFieldNumber;
#endif  // !_MSC_VER

PageResult::PageResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PageResult::InitAsDefaultInstance() {
  account_result_ = const_cast< ::net::AccountResult*>(&::net::AccountResult::default_instance());
  food_result_ = const_cast< ::net::FoodResult*>(&::net::FoodResult::default_instance());
  nutrition_result_ = const_cast< ::net::NutritionResult*>(&::net::NutritionResult::default_instance());
  health_result_ = const_cast< ::net::HealthResult*>(&::net::HealthResult::default_instance());
  data_result_ = const_cast< ::net::DataResult*>(&::net::DataResult::default_instance());
}

PageResult::PageResult(const PageResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PageResult::SharedCtor() {
  _cached_size_ = 0;
  account_result_ = NULL;
  food_result_ = NULL;
  nutrition_result_ = NULL;
  health_result_ = NULL;
  data_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PageResult::~PageResult() {
  SharedDtor();
}

void PageResult::SharedDtor() {
  if (this != default_instance_) {
    delete account_result_;
    delete food_result_;
    delete nutrition_result_;
    delete health_result_;
    delete data_result_;
  }
}

void PageResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PageResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PageResult_descriptor_;
}

const PageResult& PageResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

PageResult* PageResult::default_instance_ = NULL;

PageResult* PageResult::New() const {
  return new PageResult;
}

void PageResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_result()) {
      if (account_result_ != NULL) account_result_->::net::AccountResult::Clear();
    }
    if (has_food_result()) {
      if (food_result_ != NULL) food_result_->::net::FoodResult::Clear();
    }
    if (has_nutrition_result()) {
      if (nutrition_result_ != NULL) nutrition_result_->::net::NutritionResult::Clear();
    }
    if (has_health_result()) {
      if (health_result_ != NULL) health_result_->::net::HealthResult::Clear();
    }
    if (has_data_result()) {
      if (data_result_ != NULL) data_result_->::net::DataResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PageResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.AccountResult account_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_food_result;
        break;
      }

      // optional .net.FoodResult food_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_food_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nutrition_result;
        break;
      }

      // optional .net.NutritionResult nutrition_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nutrition_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nutrition_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_health_result;
        break;
      }

      // optional .net.HealthResult health_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_health_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_health_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_result;
        break;
      }

      // optional .net.DataResult data_result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PageResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.AccountResult account_result = 1;
  if (has_account_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_result(), output);
  }

  // optional .net.FoodResult food_result = 2;
  if (has_food_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->food_result(), output);
  }

  // optional .net.NutritionResult nutrition_result = 3;
  if (has_nutrition_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nutrition_result(), output);
  }

  // optional .net.HealthResult health_result = 4;
  if (has_health_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->health_result(), output);
  }

  // optional .net.DataResult data_result = 5;
  if (has_data_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PageResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.AccountResult account_result = 1;
  if (has_account_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_result(), target);
  }

  // optional .net.FoodResult food_result = 2;
  if (has_food_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->food_result(), target);
  }

  // optional .net.NutritionResult nutrition_result = 3;
  if (has_nutrition_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nutrition_result(), target);
  }

  // optional .net.HealthResult health_result = 4;
  if (has_health_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->health_result(), target);
  }

  // optional .net.DataResult data_result = 5;
  if (has_data_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PageResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.AccountResult account_result = 1;
    if (has_account_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_result());
    }

    // optional .net.FoodResult food_result = 2;
    if (has_food_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food_result());
    }

    // optional .net.NutritionResult nutrition_result = 3;
    if (has_nutrition_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nutrition_result());
    }

    // optional .net.HealthResult health_result = 4;
    if (has_health_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_result());
    }

    // optional .net.DataResult data_result = 5;
    if (has_data_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PageResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PageResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PageResult::MergeFrom(const PageResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_result()) {
      mutable_account_result()->::net::AccountResult::MergeFrom(from.account_result());
    }
    if (from.has_food_result()) {
      mutable_food_result()->::net::FoodResult::MergeFrom(from.food_result());
    }
    if (from.has_nutrition_result()) {
      mutable_nutrition_result()->::net::NutritionResult::MergeFrom(from.nutrition_result());
    }
    if (from.has_health_result()) {
      mutable_health_result()->::net::HealthResult::MergeFrom(from.health_result());
    }
    if (from.has_data_result()) {
      mutable_data_result()->::net::DataResult::MergeFrom(from.data_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PageResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageResult::CopyFrom(const PageResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageResult::IsInitialized() const {

  if (has_account_result()) {
    if (!this->account_result().IsInitialized()) return false;
  }
  if (has_food_result()) {
    if (!this->food_result().IsInitialized()) return false;
  }
  if (has_health_result()) {
    if (!this->health_result().IsInitialized()) return false;
  }
  return true;
}

void PageResult::Swap(PageResult* other) {
  if (other != this) {
    std::swap(account_result_, other->account_result_);
    std::swap(food_result_, other->food_result_);
    std::swap(nutrition_result_, other->nutrition_result_);
    std::swap(health_result_, other->health_result_);
    std::swap(data_result_, other->data_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PageResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PageResult_descriptor_;
  metadata.reflection = PageResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UintFloatPair::kIntValueFieldNumber;
const int UintFloatPair::kFloatValueFieldNumber;
#endif  // !_MSC_VER

UintFloatPair::UintFloatPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UintFloatPair::InitAsDefaultInstance() {
}

UintFloatPair::UintFloatPair(const UintFloatPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UintFloatPair::SharedCtor() {
  _cached_size_ = 0;
  int_value_ = 0u;
  float_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UintFloatPair::~UintFloatPair() {
  SharedDtor();
}

void UintFloatPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UintFloatPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UintFloatPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UintFloatPair_descriptor_;
}

const UintFloatPair& UintFloatPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

UintFloatPair* UintFloatPair::default_instance_ = NULL;

UintFloatPair* UintFloatPair::New() const {
  return new UintFloatPair;
}

void UintFloatPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int_value_ = 0u;
    float_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UintFloatPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 int_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_float_value;
        break;
      }

      // required float float_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UintFloatPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 int_value = 1;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->int_value(), output);
  }

  // required float float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UintFloatPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 int_value = 1;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->int_value(), target);
  }

  // required float float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UintFloatPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 int_value = 1;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_value());
    }

    // required float float_value = 2;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UintFloatPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UintFloatPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UintFloatPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UintFloatPair::MergeFrom(const UintFloatPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UintFloatPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UintFloatPair::CopyFrom(const UintFloatPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UintFloatPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UintFloatPair::Swap(UintFloatPair* other) {
  if (other != this) {
    std::swap(int_value_, other->int_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UintFloatPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UintFloatPair_descriptor_;
  metadata.reflection = UintFloatPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Date::kYearFieldNumber;
const int Date::kMonthFieldNumber;
const int Date::kDayFieldNumber;
#endif  // !_MSC_VER

Date::Date()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Date::InitAsDefaultInstance() {
}

Date::Date(const Date& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Date::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Date::~Date() {
  SharedDtor();
}

void Date::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Date::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Date_descriptor_;
}

const Date& Date::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

Date* Date::default_instance_ = NULL;

Date* Date::New() const {
  return new Date;
}

void Date::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 0u;
    month_ = 0u;
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // required uint32 month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // required uint32 day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // required uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // required uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Date::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // required uint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // required uint32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // required uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // required uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Date::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Date* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Date*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Date::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Date::Swap(Date* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Date::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Date_descriptor_;
  metadata.reflection = Date_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRequest::kRequestIdFieldNumber;
const int AccountRequest::kUsernameFieldNumber;
const int AccountRequest::kPasswordFieldNumber;
const int AccountRequest::kBirthdayFieldNumber;
const int AccountRequest::kGenderFieldNumber;
const int AccountRequest::kLaborTypeFieldNumber;
const int AccountRequest::kHeightFieldNumber;
const int AccountRequest::kWeightFieldNumber;
#endif  // !_MSC_VER

AccountRequest::AccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRequest::InitAsDefaultInstance() {
  birthday_ = const_cast< ::net::Date*>(&::net::Date::default_instance());
}

AccountRequest::AccountRequest(const AccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthday_ = NULL;
  gender_ = 0u;
  labor_type_ = 0u;
  height_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRequest::~AccountRequest() {
  SharedDtor();
}

void AccountRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete birthday_;
  }
}

void AccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRequest_descriptor_;
}

const AccountRequest& AccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

AccountRequest* AccountRequest::default_instance_ = NULL;

AccountRequest* AccountRequest::New() const {
  return new AccountRequest;
}

void AccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != NULL) birthday_->::net::Date::Clear();
    }
    gender_ = 0u;
    labor_type_ = 0u;
    height_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required bytes password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_birthday;
        break;
      }

      // optional .net.Date birthday = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birthday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_labor_type;
        break;
      }

      // optional uint32 labor_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &labor_type_)));
          set_has_labor_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_height;
        break;
      }

      // optional float height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_weight;
        break;
      }

      // optional float weight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // required bytes password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->password(), output);
  }

  // optional .net.Date birthday = 4;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->birthday(), output);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gender(), output);
  }

  // optional uint32 labor_type = 6;
  if (has_labor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->labor_type(), output);
  }

  // optional float height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->height(), output);
  }

  // optional float weight = 8;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // required bytes password = 3;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  // optional .net.Date birthday = 4;
  if (has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->birthday(), target);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gender(), target);
  }

  // optional uint32 labor_type = 6;
  if (has_labor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->labor_type(), target);
  }

  // optional float height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->height(), target);
  }

  // optional float weight = 8;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required bytes password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional .net.Date birthday = 4;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birthday());
    }

    // optional uint32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 labor_type = 6;
    if (has_labor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->labor_type());
    }

    // optional float height = 7;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float weight = 8;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRequest::MergeFrom(const AccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_birthday()) {
      mutable_birthday()->::net::Date::MergeFrom(from.birthday());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_labor_type()) {
      set_labor_type(from.labor_type());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRequest::CopyFrom(const AccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_birthday()) {
    if (!this->birthday().IsInitialized()) return false;
  }
  return true;
}

void AccountRequest::Swap(AccountRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(birthday_, other->birthday_);
    std::swap(gender_, other->gender_);
    std::swap(labor_type_, other->labor_type_);
    std::swap(height_, other->height_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRequest_descriptor_;
  metadata.reflection = AccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountResult::kUserIdFieldNumber;
const int AccountResult::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

AccountResult::AccountResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountResult::InitAsDefaultInstance() {
}

AccountResult::AccountResult(const AccountResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountResult::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountResult::~AccountResult() {
  SharedDtor();
}

void AccountResult::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void AccountResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountResult_descriptor_;
}

const AccountResult& AccountResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

AccountResult* AccountResult::default_instance_ = NULL;

AccountResult* AccountResult::New() const {
  return new AccountResult;
}

void AccountResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional bytes error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional bytes error_message = 2;
  if (has_error_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountResult::MergeFrom(const AccountResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountResult::CopyFrom(const AccountResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountResult::Swap(AccountResult* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountResult_descriptor_;
  metadata.reflection = AccountResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodRequest::kEaterNumFieldNumber;
const int FoodRequest::kCuisineTypeFieldNumber;
const int FoodRequest::kMealTypeFieldNumber;
const int FoodRequest::kExistFoodFieldNumber;
const int FoodRequest::kPreferFoodFieldNumber;
const int FoodRequest::kHateFoodFieldNumber;
const int FoodRequest::kSelectedDishFieldNumber;
#endif  // !_MSC_VER

FoodRequest::FoodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FoodRequest::InitAsDefaultInstance() {
}

FoodRequest::FoodRequest(const FoodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FoodRequest::SharedCtor() {
  _cached_size_ = 0;
  eater_num_ = 0u;
  cuisine_type_ = 0u;
  meal_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodRequest::~FoodRequest() {
  SharedDtor();
}

void FoodRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodRequest_descriptor_;
}

const FoodRequest& FoodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

FoodRequest* FoodRequest::default_instance_ = NULL;

FoodRequest* FoodRequest::New() const {
  return new FoodRequest;
}

void FoodRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eater_num_ = 0u;
    cuisine_type_ = 0u;
    meal_type_ = 0u;
  }
  exist_food_.Clear();
  prefer_food_.Clear();
  hate_food_.Clear();
  selected_dish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eater_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eater_num_)));
          set_has_eater_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cuisine_type;
        break;
      }

      // optional uint32 cuisine_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cuisine_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cuisine_type_)));
          set_has_cuisine_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_meal_type;
        break;
      }

      // optional uint32 meal_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meal_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meal_type_)));
          set_has_meal_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exist_food;
        break;
      }

      // repeated .net.UintFloatPair exist_food = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exist_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exist_food()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exist_food;
        if (input->ExpectTag(42)) goto parse_prefer_food;
        break;
      }

      // repeated uint32 prefer_food = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefer_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prefer_food())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_prefer_food())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hate_food;
        break;
      }

      // repeated uint32 hate_food = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hate_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hate_food())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_hate_food())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_selected_dish;
        break;
      }

      // repeated uint32 selected_dish = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_dish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selected_dish())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_selected_dish())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FoodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eater_num = 1;
  if (has_eater_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eater_num(), output);
  }

  // optional uint32 cuisine_type = 2;
  if (has_cuisine_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cuisine_type(), output);
  }

  // optional uint32 meal_type = 3;
  if (has_meal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->meal_type(), output);
  }

  // repeated .net.UintFloatPair exist_food = 4;
  for (int i = 0; i < this->exist_food_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exist_food(i), output);
  }

  // repeated uint32 prefer_food = 5 [packed = true];
  if (this->prefer_food_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_prefer_food_cached_byte_size_);
  }
  for (int i = 0; i < this->prefer_food_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->prefer_food(i), output);
  }

  // repeated uint32 hate_food = 6 [packed = true];
  if (this->hate_food_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hate_food_cached_byte_size_);
  }
  for (int i = 0; i < this->hate_food_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hate_food(i), output);
  }

  // repeated uint32 selected_dish = 7 [packed = true];
  if (this->selected_dish_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_selected_dish_cached_byte_size_);
  }
  for (int i = 0; i < this->selected_dish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->selected_dish(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FoodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eater_num = 1;
  if (has_eater_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eater_num(), target);
  }

  // optional uint32 cuisine_type = 2;
  if (has_cuisine_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cuisine_type(), target);
  }

  // optional uint32 meal_type = 3;
  if (has_meal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->meal_type(), target);
  }

  // repeated .net.UintFloatPair exist_food = 4;
  for (int i = 0; i < this->exist_food_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exist_food(i), target);
  }

  // repeated uint32 prefer_food = 5 [packed = true];
  if (this->prefer_food_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _prefer_food_cached_byte_size_, target);
  }
  for (int i = 0; i < this->prefer_food_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->prefer_food(i), target);
  }

  // repeated uint32 hate_food = 6 [packed = true];
  if (this->hate_food_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hate_food_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hate_food_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->hate_food(i), target);
  }

  // repeated uint32 selected_dish = 7 [packed = true];
  if (this->selected_dish_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _selected_dish_cached_byte_size_, target);
  }
  for (int i = 0; i < this->selected_dish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->selected_dish(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FoodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eater_num = 1;
    if (has_eater_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eater_num());
    }

    // optional uint32 cuisine_type = 2;
    if (has_cuisine_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cuisine_type());
    }

    // optional uint32 meal_type = 3;
    if (has_meal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meal_type());
    }

  }
  // repeated .net.UintFloatPair exist_food = 4;
  total_size += 1 * this->exist_food_size();
  for (int i = 0; i < this->exist_food_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exist_food(i));
  }

  // repeated uint32 prefer_food = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->prefer_food_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prefer_food(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _prefer_food_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 hate_food = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->hate_food_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hate_food(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hate_food_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 selected_dish = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->selected_dish_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selected_dish(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _selected_dish_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodRequest::MergeFrom(const FoodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  exist_food_.MergeFrom(from.exist_food_);
  prefer_food_.MergeFrom(from.prefer_food_);
  hate_food_.MergeFrom(from.hate_food_);
  selected_dish_.MergeFrom(from.selected_dish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eater_num()) {
      set_eater_num(from.eater_num());
    }
    if (from.has_cuisine_type()) {
      set_cuisine_type(from.cuisine_type());
    }
    if (from.has_meal_type()) {
      set_meal_type(from.meal_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodRequest::CopyFrom(const FoodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodRequest::IsInitialized() const {

  for (int i = 0; i < exist_food_size(); i++) {
    if (!this->exist_food(i).IsInitialized()) return false;
  }
  return true;
}

void FoodRequest::Swap(FoodRequest* other) {
  if (other != this) {
    std::swap(eater_num_, other->eater_num_);
    std::swap(cuisine_type_, other->cuisine_type_);
    std::swap(meal_type_, other->meal_type_);
    exist_food_.Swap(&other->exist_food_);
    prefer_food_.Swap(&other->prefer_food_);
    hate_food_.Swap(&other->hate_food_);
    selected_dish_.Swap(&other->selected_dish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodRequest_descriptor_;
  metadata.reflection = FoodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodResult::kRecipeFieldNumber;
#endif  // !_MSC_VER

FoodResult::FoodResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FoodResult::InitAsDefaultInstance() {
}

FoodResult::FoodResult(const FoodResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FoodResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodResult::~FoodResult() {
  SharedDtor();
}

void FoodResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodResult_descriptor_;
}

const FoodResult& FoodResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

FoodResult* FoodResult::default_instance_ = NULL;

FoodResult* FoodResult::New() const {
  return new FoodResult;
}

void FoodResult::Clear() {
  recipe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.UintFloatPair recipe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recipe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recipe;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FoodResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.UintFloatPair recipe = 1;
  for (int i = 0; i < this->recipe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recipe(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FoodResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.UintFloatPair recipe = 1;
  for (int i = 0; i < this->recipe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recipe(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FoodResult::ByteSize() const {
  int total_size = 0;

  // repeated .net.UintFloatPair recipe = 1;
  total_size += 1 * this->recipe_size();
  for (int i = 0; i < this->recipe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recipe(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodResult::MergeFrom(const FoodResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipe_.MergeFrom(from.recipe_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodResult::CopyFrom(const FoodResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodResult::IsInitialized() const {

  for (int i = 0; i < recipe_size(); i++) {
    if (!this->recipe(i).IsInitialized()) return false;
  }
  return true;
}

void FoodResult::Swap(FoodResult* other) {
  if (other != this) {
    recipe_.Swap(&other->recipe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodResult_descriptor_;
  metadata.reflection = FoodResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NutritionRequest::kRequestIdFieldNumber;
const int NutritionRequest::kDishFieldNumber;
#endif  // !_MSC_VER

NutritionRequest::NutritionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NutritionRequest::InitAsDefaultInstance() {
}

NutritionRequest::NutritionRequest(const NutritionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NutritionRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NutritionRequest::~NutritionRequest() {
  SharedDtor();
}

void NutritionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NutritionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NutritionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NutritionRequest_descriptor_;
}

const NutritionRequest& NutritionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

NutritionRequest* NutritionRequest::default_instance_ = NULL;

NutritionRequest* NutritionRequest::New() const {
  return new NutritionRequest;
}

void NutritionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
  }
  dish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NutritionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dish;
        break;
      }

      // repeated uint32 dish = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dish())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_dish())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NutritionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated uint32 dish = 2 [packed = true];
  if (this->dish_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dish_cached_byte_size_);
  }
  for (int i = 0; i < this->dish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->dish(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NutritionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated uint32 dish = 2 [packed = true];
  if (this->dish_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dish_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->dish(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NutritionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

  }
  // repeated uint32 dish = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dish_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dish(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dish_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NutritionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NutritionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NutritionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NutritionRequest::MergeFrom(const NutritionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  dish_.MergeFrom(from.dish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NutritionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NutritionRequest::CopyFrom(const NutritionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NutritionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NutritionRequest::Swap(NutritionRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    dish_.Swap(&other->dish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NutritionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NutritionRequest_descriptor_;
  metadata.reflection = NutritionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NutritionResult::kNutritionFieldNumber;
const int NutritionResult::kRecommendFieldNumber;
#endif  // !_MSC_VER

NutritionResult::NutritionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NutritionResult::InitAsDefaultInstance() {
}

NutritionResult::NutritionResult(const NutritionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NutritionResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NutritionResult::~NutritionResult() {
  SharedDtor();
}

void NutritionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NutritionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NutritionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NutritionResult_descriptor_;
}

const NutritionResult& NutritionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

NutritionResult* NutritionResult::default_instance_ = NULL;

NutritionResult* NutritionResult::New() const {
  return new NutritionResult;
}

void NutritionResult::Clear() {
  nutrition_.Clear();
  recommend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NutritionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float nutrition = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_nutrition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_nutrition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recommend;
        break;
      }

      // repeated float recommend = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_recommend())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_recommend())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NutritionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float nutrition = 1 [packed = true];
  if (this->nutrition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nutrition_cached_byte_size_);
  }
  for (int i = 0; i < this->nutrition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->nutrition(i), output);
  }

  // repeated float recommend = 2 [packed = true];
  if (this->recommend_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_recommend_cached_byte_size_);
  }
  for (int i = 0; i < this->recommend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->recommend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NutritionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float nutrition = 1 [packed = true];
  if (this->nutrition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nutrition_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nutrition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->nutrition(i), target);
  }

  // repeated float recommend = 2 [packed = true];
  if (this->recommend_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _recommend_cached_byte_size_, target);
  }
  for (int i = 0; i < this->recommend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->recommend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NutritionResult::ByteSize() const {
  int total_size = 0;

  // repeated float nutrition = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->nutrition_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nutrition_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float recommend = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->recommend_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _recommend_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NutritionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NutritionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NutritionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NutritionResult::MergeFrom(const NutritionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  nutrition_.MergeFrom(from.nutrition_);
  recommend_.MergeFrom(from.recommend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NutritionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NutritionResult::CopyFrom(const NutritionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NutritionResult::IsInitialized() const {

  return true;
}

void NutritionResult::Swap(NutritionResult* other) {
  if (other != this) {
    nutrition_.Swap(&other->nutrition_);
    recommend_.Swap(&other->recommend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NutritionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NutritionResult_descriptor_;
  metadata.reflection = NutritionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HealthRequest::kRequestIdFieldNumber;
const int HealthRequest::kGenderFieldNumber;
const int HealthRequest::kIsKidFieldNumber;
const int HealthRequest::kSymptomFieldNumber;
#endif  // !_MSC_VER

HealthRequest::HealthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthRequest::InitAsDefaultInstance() {
}

HealthRequest::HealthRequest(const HealthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  gender_ = 0u;
  is_kid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthRequest::~HealthRequest() {
  SharedDtor();
}

void HealthRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HealthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthRequest_descriptor_;
}

const HealthRequest& HealthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

HealthRequest* HealthRequest::default_instance_ = NULL;

HealthRequest* HealthRequest::New() const {
  return new HealthRequest;
}

void HealthRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    gender_ = 0u;
    is_kid_ = 0u;
  }
  symptom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gender;
        break;
      }

      // required uint32 gender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_kid;
        break;
      }

      // required uint32 is_kid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_kid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_kid_)));
          set_has_is_kid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_symptom;
        break;
      }

      // repeated uint32 symptom = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symptom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_symptom())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_symptom())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 gender = 2;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gender(), output);
  }

  // required uint32 is_kid = 3;
  if (has_is_kid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_kid(), output);
  }

  // repeated uint32 symptom = 4 [packed = true];
  if (this->symptom_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_symptom_cached_byte_size_);
  }
  for (int i = 0; i < this->symptom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->symptom(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required uint32 gender = 2;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gender(), target);
  }

  // required uint32 is_kid = 3;
  if (has_is_kid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_kid(), target);
  }

  // repeated uint32 symptom = 4 [packed = true];
  if (this->symptom_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _symptom_cached_byte_size_, target);
  }
  for (int i = 0; i < this->symptom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->symptom(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 gender = 2;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // required uint32 is_kid = 3;
    if (has_is_kid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_kid());
    }

  }
  // repeated uint32 symptom = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->symptom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->symptom(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _symptom_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthRequest::MergeFrom(const HealthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  symptom_.MergeFrom(from.symptom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_is_kid()) {
      set_is_kid(from.is_kid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthRequest::CopyFrom(const HealthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HealthRequest::Swap(HealthRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(gender_, other->gender_);
    std::swap(is_kid_, other->is_kid_);
    symptom_.Swap(&other->symptom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthRequest_descriptor_;
  metadata.reflection = HealthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HealthResult::kSyndromeFieldNumber;
const int HealthResult::kAnalyzeFieldNumber;
const int HealthResult::kRecommendFieldNumber;
const int HealthResult::kSymptomFieldNumber;
const int HealthResult::kQuestionFieldNumber;
#endif  // !_MSC_VER

HealthResult::HealthResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthResult::InitAsDefaultInstance() {
}

HealthResult::HealthResult(const HealthResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthResult::SharedCtor() {
  _cached_size_ = 0;
  analyze_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recommend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symptom_ = 0u;
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthResult::~HealthResult() {
  SharedDtor();
}

void HealthResult::SharedDtor() {
  if (analyze_ != &::google::protobuf::internal::kEmptyString) {
    delete analyze_;
  }
  if (recommend_ != &::google::protobuf::internal::kEmptyString) {
    delete recommend_;
  }
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (this != default_instance_) {
  }
}

void HealthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthResult_descriptor_;
}

const HealthResult& HealthResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

HealthResult* HealthResult::default_instance_ = NULL;

HealthResult* HealthResult::New() const {
  return new HealthResult;
}

void HealthResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_analyze()) {
      if (analyze_ != &::google::protobuf::internal::kEmptyString) {
        analyze_->clear();
      }
    }
    if (has_recommend()) {
      if (recommend_ != &::google::protobuf::internal::kEmptyString) {
        recommend_->clear();
      }
    }
    symptom_ = 0u;
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::kEmptyString) {
        question_->clear();
      }
    }
  }
  syndrome_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.UintFloatPair syndrome = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syndrome:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_syndrome()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_syndrome;
        if (input->ExpectTag(18)) goto parse_analyze;
        break;
      }

      // optional bytes analyze = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_analyze:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_analyze()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recommend;
        break;
      }

      // optional bytes recommend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recommend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_symptom;
        break;
      }

      // optional uint32 symptom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symptom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symptom_)));
          set_has_symptom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_question;
        break;
      }

      // optional bytes question = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_question()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.UintFloatPair syndrome = 1;
  for (int i = 0; i < this->syndrome_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->syndrome(i), output);
  }

  // optional bytes analyze = 2;
  if (has_analyze()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->analyze(), output);
  }

  // optional bytes recommend = 3;
  if (has_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->recommend(), output);
  }

  // optional uint32 symptom = 4;
  if (has_symptom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->symptom(), output);
  }

  // optional bytes question = 5;
  if (has_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->question(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.UintFloatPair syndrome = 1;
  for (int i = 0; i < this->syndrome_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->syndrome(i), target);
  }

  // optional bytes analyze = 2;
  if (has_analyze()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->analyze(), target);
  }

  // optional bytes recommend = 3;
  if (has_recommend()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->recommend(), target);
  }

  // optional uint32 symptom = 4;
  if (has_symptom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->symptom(), target);
  }

  // optional bytes question = 5;
  if (has_question()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->question(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes analyze = 2;
    if (has_analyze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->analyze());
    }

    // optional bytes recommend = 3;
    if (has_recommend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recommend());
    }

    // optional uint32 symptom = 4;
    if (has_symptom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symptom());
    }

    // optional bytes question = 5;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->question());
    }

  }
  // repeated .net.UintFloatPair syndrome = 1;
  total_size += 1 * this->syndrome_size();
  for (int i = 0; i < this->syndrome_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->syndrome(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthResult::MergeFrom(const HealthResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  syndrome_.MergeFrom(from.syndrome_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_analyze()) {
      set_analyze(from.analyze());
    }
    if (from.has_recommend()) {
      set_recommend(from.recommend());
    }
    if (from.has_symptom()) {
      set_symptom(from.symptom());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthResult::CopyFrom(const HealthResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthResult::IsInitialized() const {

  for (int i = 0; i < syndrome_size(); i++) {
    if (!this->syndrome(i).IsInitialized()) return false;
  }
  return true;
}

void HealthResult::Swap(HealthResult* other) {
  if (other != this) {
    syndrome_.Swap(&other->syndrome_);
    std::swap(analyze_, other->analyze_);
    std::swap(recommend_, other->recommend_);
    std::swap(symptom_, other->symptom_);
    std::swap(question_, other->question_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthResult_descriptor_;
  metadata.reflection = HealthResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataRequest::kRequestIdFieldNumber;
const int DataRequest::kKeywordFieldNumber;
const int DataRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

DataRequest::DataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataRequest::InitAsDefaultInstance() {
}

DataRequest::DataRequest(const DataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataRequest::~DataRequest() {
  SharedDtor();
}

void DataRequest::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::kEmptyString) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void DataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataRequest_descriptor_;
}

const DataRequest& DataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

DataRequest* DataRequest::default_instance_ = NULL;

DataRequest* DataRequest::New() const {
  return new DataRequest;
}

void DataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::kEmptyString) {
        keyword_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyword;
        break;
      }

      // optional bytes keyword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional bytes keyword = 2;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keyword(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional bytes keyword = 2;
  if (has_keyword()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->keyword(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional bytes keyword = 2;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keyword());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataRequest::MergeFrom(const DataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequest::CopyFrom(const DataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataRequest::Swap(DataRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(keyword_, other->keyword_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataRequest_descriptor_;
  metadata.reflection = DataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataResult::kIdFieldNumber;
#endif  // !_MSC_VER

DataResult::DataResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataResult::InitAsDefaultInstance() {
}

DataResult::DataResult(const DataResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResult::~DataResult() {
  SharedDtor();
}

void DataResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataResult_descriptor_;
}

const DataResult& DataResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_netmessage_2eproto();
  return *default_instance_;
}

DataResult* DataResult::default_instance_ = NULL;

DataResult* DataResult::New() const {
  return new DataResult;
}

void DataResult::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1 [packed = true];
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1 [packed = true];
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataResult::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataResult::MergeFrom(const DataResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResult::CopyFrom(const DataResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResult::IsInitialized() const {

  return true;
}

void DataResult::Swap(DataResult* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataResult_descriptor_;
  metadata.reflection = DataResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
